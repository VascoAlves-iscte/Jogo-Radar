import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

class ElectromagneticWave2D:
    def __init__(self, amplitude=1.0, wavelength=10.0, period=5.0, grid_size=200, space_range=50):
        """
        amplitude: amplitude da onda (v/m)
        wavelength: comprimento de onda (m)
        period: per√≠odo da onda (s)
        grid_size: n√∫mero de pontos em cada dimens√£o da grade
        space_range: tamanho total do espa√ßo em cada dimens√£o (ser√° de -space_range/2 a space_range/2)
        """
        self.amplitude = amplitude
        self.wavelength = wavelength
        self.period = period
        self.freqAng = 2 * np.pi / period  # Calcula a frequ√™ncia angular (œâ = 2œÄ/T) (rad/s)
        self.k = 2 * np.pi / wavelength    # Calcula o n√∫mero de onda (k = 2œÄ/Œª) (rad/m)
        
        # Definindo os limites do espa√ßo (centralizado na origem)
        self.x = np.linspace(-space_range/2, space_range/2, grid_size) # Gera um array de valores igualmente espa√ßados para os eixos x e y, cobrindo o intervalo desejado.
        self.y = np.linspace(-space_range/2, space_range/2, grid_size) 
        self.X, self.Y = np.meshgrid(self.x, self.y) #Cria duas matrizes que cont√™m as coordenadas x e y de cada ponto da grade. S√£o usadas para calcular a dist√¢ncia de cada ponto em rela√ß√£o √† origem.

    def wave_function(self, t):
        """
         Calcular o valor do campo el√©trico E(x,y,t) para cada ponto da grade no instante ùë°.
        """
        # Dist√¢ncia radial de cada ponto em rela√ß√£o √† origem (fonte da onda)
        R = np.sqrt(self.X**2 + self.Y**2)
        return self.amplitude * np.sin(self.k * R - self.freqAng * t) #representa a fun√ß√£o seno que descreve a oscila√ß√£o da onda multiplicada pela amplitude para ajustar a altura m√°xima da onda.

    def animate(self):
        """
        Anima a propaga√ß√£o da onda eletromagn√©tica 2D.
        """
        fig, ax = plt.subplots() #cria uma figura e um conjunto de eixos onde a anima√ß√£o ser√° exibida.
        
        # C√°lculo inicial para t = 0
        initial_data = self.wave_function(0)
        
        # Exibe a imagem usando imshow; definindo extent para mapear os eixos x e y
        im = ax.imshow(
            initial_data, 
            extent=(self.x[0], self.x[-1], self.y[0], self.y[-1]),
            cmap='RdBu', 
            vmin=-self.amplitude,  
            vmax=self.amplitude,
            animated=True
        )
        
        ax.set_title("Simula√ß√£o de Onda Eletromagn√©tica 2D")
        ax.set_xlabel("x")
        ax.set_ylabel("y")

        def update(frame): #Fun√ß√£o chamada para cada frame
            t = frame * 0.1  # O tempo pode ser escalonado conforme desejado
            data = self.wave_function(t)
            im.set_data(data)
            return im,

        # Cria a anima√ß√£o com 200 frames e um intervalo de 50ms entre cada frame
        ani = animation.FuncAnimation(fig, update, frames=200, interval=50, blit=True)
        plt.show()

if __name__ == '__main__':
    wave2d = ElectromagneticWave2D(amplitude=1.0, wavelength=10.0, period=5.0, grid_size=200, space_range=50)
    wave2d.animate()
